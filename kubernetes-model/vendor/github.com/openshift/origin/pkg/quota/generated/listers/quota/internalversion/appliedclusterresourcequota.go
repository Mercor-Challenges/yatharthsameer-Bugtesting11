/**
 * Copyright (C) 2015 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// This file was automatically generated by lister-gen

package internalversion

import (
	quota "github.com/openshift/origin/pkg/quota/apis/quota"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppliedClusterResourceQuotaLister helps list AppliedClusterResourceQuotas.
type AppliedClusterResourceQuotaLister interface {
	// List lists all AppliedClusterResourceQuotas in the indexer.
	List(selector labels.Selector) (ret []*quota.AppliedClusterResourceQuota, err error)
	// AppliedClusterResourceQuotas returns an object that can list and get AppliedClusterResourceQuotas.
	AppliedClusterResourceQuotas(namespace string) AppliedClusterResourceQuotaNamespaceLister
	AppliedClusterResourceQuotaListerExpansion
}

// appliedClusterResourceQuotaLister implements the AppliedClusterResourceQuotaLister interface.
type appliedClusterResourceQuotaLister struct {
	indexer cache.Indexer
}

// NewAppliedClusterResourceQuotaLister returns a new AppliedClusterResourceQuotaLister.
func NewAppliedClusterResourceQuotaLister(indexer cache.Indexer) AppliedClusterResourceQuotaLister {
	return &appliedClusterResourceQuotaLister{indexer: indexer}
}

// List lists all AppliedClusterResourceQuotas in the indexer.
func (s *appliedClusterResourceQuotaLister) List(selector labels.Selector) (ret []*quota.AppliedClusterResourceQuota, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*quota.AppliedClusterResourceQuota))
	})
	return ret, err
}

// AppliedClusterResourceQuotas returns an object that can list and get AppliedClusterResourceQuotas.
func (s *appliedClusterResourceQuotaLister) AppliedClusterResourceQuotas(namespace string) AppliedClusterResourceQuotaNamespaceLister {
	return appliedClusterResourceQuotaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppliedClusterResourceQuotaNamespaceLister helps list and get AppliedClusterResourceQuotas.
type AppliedClusterResourceQuotaNamespaceLister interface {
	// List lists all AppliedClusterResourceQuotas in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*quota.AppliedClusterResourceQuota, err error)
	// Get retrieves the AppliedClusterResourceQuota from the indexer for a given namespace and name.
	Get(name string) (*quota.AppliedClusterResourceQuota, error)
	AppliedClusterResourceQuotaNamespaceListerExpansion
}

// appliedClusterResourceQuotaNamespaceLister implements the AppliedClusterResourceQuotaNamespaceLister
// interface.
type appliedClusterResourceQuotaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppliedClusterResourceQuotas in the indexer for a given namespace.
func (s appliedClusterResourceQuotaNamespaceLister) List(selector labels.Selector) (ret []*quota.AppliedClusterResourceQuota, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*quota.AppliedClusterResourceQuota))
	})
	return ret, err
}

// Get retrieves the AppliedClusterResourceQuota from the indexer for a given namespace and name.
func (s appliedClusterResourceQuotaNamespaceLister) Get(name string) (*quota.AppliedClusterResourceQuota, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(quota.Resource("appliedclusterresourcequota"), name)
	}
	return obj.(*quota.AppliedClusterResourceQuota), nil
}
